

export interface IDolgnost {
  idDolg: number
  sDolg: string
}

export interface IDepartment {
  idDep: number
  sDDep: string
}

export interface IRole {
  idRole: number
  sRole: string
}

export interface IStatus {
  idStatus: number
  sStatus: string
  sComment: string
}

export interface IRoom {
  idRoom: number
  sAddress: string
  sCabinet: string
  iSeatingPlaces: number
  bHasProjector: boolean
  bHasInternet: boolean
  status: IStatus
  dtInEnable: Date            
  bDel: boolean
}

export interface IUser {
  sFam: string
  sName: string
  sOtch: string
  sPhone: string
  sEmail: string
  dolg: IDolgnost
  dep: IDepartment
  role: IRole
  bDel: boolean
}

export interface IOrder {
  idOrder: number
  dtBegin: Date            
  dtEnd: Date
  sComment: string
  iSeatingPlaces: number
  bHasProjector: boolean
  bHasInternet: boolean
  room: IRoom
  status: IStatus
  userAgreement: IUser
  bDel: boolean
}

export interface IPageRequest {
  iPage: number
  iCountOnPage: number
}

export interface IDolgListResponse extends Array<IDolgnost> {

}

export interface IDepListResponse extends Array<IDepartment> {

}

export interface IRoleListResponse extends Array<IRole> {
  
}

export interface ILoginRequest {
  sEmail: string
  sPassw: string
}
  
export interface ILoginResponse {
  sFam: string
  sName: string
  sOtch: string
  dolg: IDolgnost
  dep: IDepartment
  role: IRole
}
  
export interface IRegisterUserRequest {
  sFam: string
  sName: string
  sOtch: string
  sPhone: string
  sEmail: string
  sPassw: string
  idDolg: number
  idDep: number
  idRole: number  	
}
  
// RegisterUserResponse - успех если получен код ответа 200

export interface IUserRequest {
  idUser: number
}

export interface IUserResponse extends IUser {
	
}

export interface IUserUpdateRequest extends IRegisterUserRequest {
  idUser: number
  bDel: boolean
}

// UserUpdateResponse - успех если получен код ответа 200

export interface IUserDeleteRequest {
  idUser: number
}

// UserDeleteResponse - успех если получен код ответа 200

export interface IUserFilters {
  deletedOnly: boolean		// true - вернуть только удалённые (заменить условие по умолчанию bDel == false на bDel == true)
  deletedAdd: boolean		// true - вернуть все (удалённые и не удалённые), отменяет условие по умолчанию bDel == false 
}

export interface IUserListRequest extends IPageRequest {
  filters: IUserFilters
}

export interface IUserListResponse extends Array<IUser> {

}

export interface IChangePasswRequest {
  sOldPassw: string
  sNewPassw: string
}

// ChangePasswResponse - успех если получен код ответа 200

// ProfileRequest - no params

export interface IProfileResponse extends IUser {

}

export interface IRegisterOrderRequest {
  dtBegin: Date           
  dtEnd: Date
  sComment: string
  iSeatingPlaces: number
  bHasProjector: boolean
  bHasInternet: boolean
  idRoom: number
}
  
// RegisterOrderResponse - успех если получен код ответа 200

export interface IOrderRequest {
    idOrder: number
}
  
export interface IOrderResponse extends IOrder {

}
  
export interface IOrderDeleteRequest {
  idOrder: number
}
  
// OrderDeleteResponse - успех если получен код ответа 200

export interface IOrderFilters {
  active: boolean           // true - вернуть активные (добавить в запрос status = на согласовании и согласованные + время окончания аренды ещё не истекло)
  rejected: boolean         // true - вернуть отклонённые (добавить в запрос status = отклонённые)
  deletedOnly: boolean		// true - вернуть только удалённые (заменить условие по умолчанию bDel == false на bDel == true)
  deletedAdd: boolean		// true - вернуть все (удалённые и не удалённые), отменяет условие по умолчанию bDel == false 
}

export interface IOrderListRequest extends IPageRequest {
  filters: IOrderFilters
}

export interface IOrderListResponse extends Array<IOrder> {

}

export interface IOrderChangeStatusRequest {
  idOrder: number
  idStatus: number
}

// OrderChangeStatusResponse - успех если получен код ответа 200

export interface IRegisterRoomRequest {
  sAddress: string
  sCabinet: string
  iSeatingPlaces: number
  bHasProjector: boolean
  bHasInternet: boolean
  idStatus: number
  dtInEnable: Date
}

// RegisterRoomResponse - успех если получен код ответа 200

export interface IRoomRequest {
  idRoom: number
}

export interface IRoomResponse extends IRoom {

}

export interface IRoomDeleteRequest {
  idRoom: number
}

// RoomDeleteResponse - успех если получен код ответа 200

export interface IRoomFilters {
  dtBegin: Date | null     	// дата начала аренды (null - если фильтрация не нужна), для получения списка доступных переговорных
  dtEnd: Date | null     	// дата окончания аренды (null - если фильтрация не нужна), для получения списка доступных переговорных
  deletedOnly: boolean		// true - вернуть только удалённые (заменить условие по умолчанию bDel == false на bDel == true)
  deletedAdd: boolean		// true - вернуть все (удалённые и не удалённые), отменяет условие по умолчанию bDel == false 
}

export interface IRoomListRequest extends IPageRequest {
  filters: IRoomFilters
}

export interface IRoomListResponse extends Array<IRoom> {

}

export interface IOrderAgreementFilters {
  active: boolean           // true - вернуть активные (добавить в запрос status = на согласовании)
  rejected: boolean         // true - вернуть отклонённые (добавить в запрос status = отклонённые)
  agreemented: boolean		// true - вернуть все согласованные (добавить в запрос status = согласованные)
  agreementedByMe: boolean	// true - вернуть все согласованные этим согласующим (добавить в запрос status = согласованные + проверка согласующего)
}

export interface IOrderAgreementListRequest extends IPageRequest {
  filters: IOrderAgreementFilters
}

export interface IOrderAgreementRequest {
  idOrder: number
  idStatus: number
}

// OrderAgreementResponse - успех если получен код ответа 200

