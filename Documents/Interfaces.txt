

export interface IDolgnost {
  idDolg: number
  sDolg: string
}

export interface IDepartment {
  idDep: number
  sDep: string
}

export interface IRole {
  idRole: number
  sRole: string
}

export interface IStatus {
  idStatus: number
  sStatus: string
  sComment: string
}

export interface IRoom {
  idRoom: number
  sAddress: string
  sCabinet: string
  iSeatingPlaces: number
  bHasProjector: number
  bHasInternet: number
  status: IStatus
  dtInEnable: Date            
  dtIns: Date
  dtUpd: Date
  dtDel: Date
}

export interface IUser {
  idUser: number
  sFam: string
  sName: string
  sOtch: string
  sPhone: string
  sEmail: string
  dolg: IDolgnost
  dep: IDepartment
  role: IRole
  dtIns: Date
  dtUpd: Date
  dtDel: Date
}

export interface IOrder {
  idOrder: number
  dtBegin: Date            
  dtEnd: Date
  sComment: string
  iSeatingPlaces: number
  bHasProjector: number
  bHasInternet: number
  room: IRoom
  status: IStatus
  userAgreement: IUser
  dtIns: Date
  dtUpd: Date
  dtDel: Date
}

export interface IPageRequest {
  iPage: number
  iCountOnPage: number
}

export interface IDolgListResponse extends Array<IDolgnost> {

}

export interface IDepListResponse extends Array<IDepartment> {

}

export interface IRoleListResponse extends Array<IRole> {

}

export interface IUserToken {
  idUser: number,
  role: Role
}

export interface ILoginRequest {
  sEmail: string
  sPassw: string
}

export interface IRegisterUserRequest {
  sFam: string
  sName: string
  sOtch: string
  sPhone: string
  sEmail: string
  sPassw: string
  idDolg: number
  idDep: number
  idRole: number  	
}
  
// RegisterUserResponse - успех если получен код ответа 201

export interface IUserRequest {
  idUser: number
}

export interface IUserResponse extends IUser {
	
}

export interface IUserUpdateRequest extends IRegisterUserRequest {
  idUser: number
  bDel: boolean
}

// UserUpdateResponse - IUserResponse

// UserDeleteRequest - IUserRequest
// UserDeleteResponse - успех если получен код ответа 200

export interface IUserFilters {
  deletedOnly: boolean		// true - вернуть только удалённые
  deletedAdd: boolean		// true - вернуть все (удалённые и не удалённые)
}

export interface IUserListRequest extends IPageRequest {
  filters: IUserFilters
}

export interface IUserListResponse extends Array<IUserResponse> {

}

export interface IChangePasswRequest {
  sOldPassw: string
  sNewPassw: string
}

// ChangePasswResponse - успех если получен код ответа 200

// ProfileRequest - no params
// ProfileResponse - IUserResponse

export interface IRegisterOrderRequest {
  dtBegin: Date           
  dtEnd: Date
  sComment: string
  iSeatingPlaces: number
  bHasProjector: boolean
  bHasInternet: boolean
  idRoom: number
}
  
// RegisterOrderResponse - успех если получен код ответа 200

export interface IOrderRequest {
    idOrder: number
}
  
export interface IOrderResponse extends IOrder {

}
  
export interface IOrderDeleteRequest {
  idOrder: number
}
  
// OrderDeleteResponse - успех если получен код ответа 200

export interface IOrderFilters {
  // Для запросов от пользователя
  userActive: boolean       // true - вернуть активные (status = на согласовании и согласованные + время окончания аренды ещё не истекло)
  userRejected: boolean     // true - вернуть отклонённые (status = отклонённые, отменённые + просроченные)
  userNotDeleted: boolean   // true - вернуть все, кроме удалённых
  userDeletedOnly: boolean  // true - вернуть все удалённые
  userDeletedAdd: boolean		// true - вернуть все (удалённые и не удалённые)
  // Для запросов от согласующего
  agreeActive: boolean           // true - вернуть активные для согласования (status = на согласовании и не просроченные)
  agreeRejected: boolean         // true - вернуть отклонённые (status = отклонённые этим согласующим)
  agreeAgreemented: boolean		   // true - вернуть все согласованные (status = согласованные этим согласующим)
  agreeNotDeleted: boolean   
  agreeDeletedOnly: boolean
  agreeDeletedAdd: boolean
  // Для запросов от администратора
  adminActive: boolean          // true - вернуть активные для согласования (status = на согласовании и не просроченные)
  adminRejected: boolean        // true - вернуть отклонённые (status = отклонённые)
  adminAgreemented: boolean     // true - вернуть все согласованные (status = согласованные)
  adminNotDeleted: boolean   
  adminDeletedOnly: boolean
  adminDeletedAdd: boolean
}

export interface IOrderListRequest extends IPageRequest {
  filters: IOrderFilters
}

export interface IOrderListResponse extends Array<IOrder> {

}

export interface IOrderChangeStatusRequest {
  idOrder: number
  idStatus: number
}

// OrderChangeStatusResponse - IOrderResponse

export interface IRegisterRoomRequest {
  sAddress: string
  sCabinet: string
  iSeatingPlaces: number
  bHasProjector: boolean
  bHasInternet: boolean
  idStatus: number
  dtInEnable: Date | null
}

// RegisterRoomResponse - успех если получен код ответа 200

export interface IRoomRequest {
  idRoom: number
}

export interface IRoomResponse extends IRoom {

}

export interface IRoomUpdateRequest extends IRegisterRoomRequest {
  idRoom: number
  bDel: boolean
}

// RoomUpdateResponse - успех если получен код ответа 200

export interface IRoomDeleteRequest {
  idRoom: number
}

// RoomDeleteResponse - успех если получен код ответа 200

export interface IRoomFilters {
  dtBegin: Date | null        // дата начала аренды (null - если фильтрация не нужна), для получения списка доступных переговорных
  dtEnd: Date | null     	    // дата окончания аренды (null - если фильтрация не нужна), для получения списка доступных переговорных
  adminNotDeleted: boolean    // true - вернуть только не удалённые
  adminDeletedOnly: boolean		// true - вернуть только удалённые
  adminDeletedAdd: boolean    // true - вернуть все (удалённые и не удалённые)
}

export interface IRoomListRequest extends IPageRequest {
  filters: IRoomFilters
}

export interface IRoomListResponse extends Array<IRoom> {

}
